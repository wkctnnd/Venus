cmake_minimum_required(VERSION 2.8)
INCLUDE_DIRECTORIES(${VenusInc}/Utility)

ADD_SUBDIRECTORY(File File)
ADD_SUBDIRECTORY(Memory Memory)
ADD_SuBDIRECTORY(Container Container)
 
FILE(GLOB_RECURSE Container_SOURCE ./Container/*.cpp)


FILE(GLOB_RECURSE MAC_FILE_SOURCE ./File/Mac/*.cpp)
#FILE(GLOB_RECURSE MAC_FILE_HEADER ./File/Mac/*.h)

FILE(GLOB_RECURSE WIN_FILE_SOURCE ./File/WIN/*.cpp)
#FILE(GLOB_RECURSE WIN_FILE_HEADER ./File/WIN/*.h)

FILE(GLOB_RECURSE MEMORY_SOURCE ./Memory/*.cpp)
#FILE(GLOB_RECURSE MAC_MEMORY_HEADER ./Memory/Mac/*.h)

#FILE(GLOB_RECURSE WIN_MEMORY_HEADER ./Memory/WIN/*.h)

FILE(GLOB_RECURSE MEMORY_HEADER ${PROJECT_SOURCE_DIR}/include/Utility/Memory/*.h)
FILE(GLOB_RECURSE FILE_HEADER ${PROJECT_SOURCE_DIR}/include/Utility/File/*.h)


List(APPEND sources ${MAC_FILE_SOURCE} ${WIN_FILE_SOURCE} ${FILE_HEADER} ${MEMORY_SOURCE} ${MEMORY_HEADER} ./File/*.cpp)
#FILE(GLOB_RECURSE SOURCE_1 *.cpp)
#FILE(GLOB_RECURSE SOURCE_2 *.h)

#set(all_files ${SOURCE_1} ${SOURCE_2})
#source_group_by_dir(all_files)
source_group_by_dir(sources)

IF(APPLE)
 ADD_LIBRARY(Utility STATIC ${MAC_FILE_SOURCE} ${MEMORY_SOURCE} ${FILE_HEADER} ${MEMORY_HEADER} ./File/*.cpp ${Container_SOURCE})
 ELSEIF(WIN32)
  ADD_LIBRARY(Utility STATIC ${WIN_FILE_SOURCE} ${MEMORY_SOURCE} ${FILE_HEADER} ${MEMORY_HEADER} ./File/*.cpp ${Container_SOURCE})
endif()